#!/bin/bash
# 2082809 Jeroen Jetrax t6 van Beuningen
# 2139192 Burak (krakatoa) Imre
# Duper

#=variablen=============================
start_time=$(date)
amount_found=0
amount_deleted=0
del_dup=false
lin_dup=false
file_array=()
exclude_file=()
used_cap_x=false
used_small_x=false
# COLOR CODES
RED='\033[0;31m'
NC='\033[0m'
#=======================================
clear

#=functions=============================
function usage () {
	echo "Usage: $0 [-r | -1] [-x filename | -X filename] [-l landcode] [directory]"
}

#=getops================================
while getopts ":rix:X:l:f:" VALUE "$@"; do
	# om gevonden duplicaten direct te laten verwijderen;
	if [ $VALUE = "r" ] ; then
		if [ "$lin_dup" != true ] ; then
			if [ "$del_dup" == false ]; then
				echo -e "[ ${RED}DELETE DUPLICATE MODE ${NC}]"
				del_dup=true
			fi
		else
			echo "LINK DUPLICATE MODE is already active, Ignoring argument"
		fi
	fi
	#extra
	#Voeg een optie -i toe. Deze zorgt ervoor dat duplicaten niet verwijderd worden maar als hardlinks naar het ‘origineel’ worden gelegd zodat ze geen extra ruimte in beslag nemen. 
	#Let op! Indien je deze extra optie implementeert, moet je ook voorkomen dat de opties -ren -itegelijk actief zijn.
	if [ $VALUE = "i" ] ; then
		if [ "$del_dup" != true ] ; then
			if [ "$lin_dup" != true ] ; then
				echo -e "[ ${RED}LINK DUPLICATE MODE ${NC}]"
				lin_dup=true
			fi
		else
			echo "DELETE DUPLICATE MODE is already active, Ignoring argument"
		fi
	fi
	# <naam> om een file op te geven die buiten beschouwing gelaten moet worden bij het zoeken naar duplicaten. 
	# (mag meerdere keren worden gebruikt, elke uit te sluiten file moet met een aparte -x genoemd worden; geen wildcards gebruiken zoals *);
	if [ $VALUE = "x" ] ; then
		if [ $used_cap_x == true ] ; then 
			echo $LANG_AUBX
		else
			exclude_file+=("$OPTARG")

			if [ $used_small_x == false ] ; then
				$used_small_x=true
			fi
		fi
	fi
	#EXTRA
	#Voeg een optie -X <filename> toe (hoofdletter X), met als argument een configuratie file waarin alle te excluden files en/of directories staan opgesomd, één per regel. 
	#Dat is dus een alternatief voor het meerdere malen gebruiken van de -x optie (kleine x).
	if [ $VALUE = "X" ] ; then	
		if [ $used_small_x == true ] ; then
			echo $LANG_AUSX
		else
			if [ $used_cap_x == false ] ; then
				if [ -f "$OPTARG" ] ; then
					if [ ! -z "$OPTARG" ] ; then
						while read line; do
							if [ ! -z "$line" ] ; then
								exclude_file+=("$line")
							fi
						done < "$OPTARG"
					else
						echo $LANG_FIE
					fi
				else
					echo $LANG_DirDNE
				fi
				used_cap_x=true
			else
				echo $LANG_XAU
			fi
		fi
	fi
	# optie -l <landcode> om een landcode in 2 letters mee te geven, waarmee de taal van de meldingen kan worden ingesteld. 
	# Om dat te bouwen kun je voor alle meldingen shell variabelen definiëren, die je voor elke taal in een bestand zet. 
	# Dan kun je het juiste taalbestand laden met behulp van het source-mechanisme.
	if [ $VALUE = "l" ] ; then
		echo "language: $OPTARG"
		
		if [ ! -d "./lang" ] ; then
			echo "directory 'lang' does not exist!"
		elif [ ! -f "./lang/$OPTARG.sh" ] ; then
			echo "Language '$OPTARG' file not found!"
		else 
			source "./lang/$OPTARG.sh"
		fi
	fi
	#extra
	#optie -f <filename> om een bestand aan te maken met daarin de absolute paden naar alle gevonden duplicaten. 
	#Op elke regel staat 1 bestandsnaam omgeven door "-karakters. 
	#Dit bestand kan gebruikt worden om op een later tijdstip een bewerking op de gevonden duplicaten te kunnen doen met andere tool dan duper.
	if [ $VALUE = "f" ] ; then
		filename="$OPTARG"
		echo "$filename"
	fi
	#er zijn opties meegegeven die je niet geïmplementeerd hebt, druk dan een usage string af;
	if [ $VALUE = "?" ] ; then
		echo "Unknown flag -$OPTARG detected."
        usage
        exit 1
	fi
	if [ $VALUE = ":" ] ; then
		echo "Option -$OPTARG requires an argument."
        usage
        exit 1
	fi
done

#=======================================
#de start-directory bestaat niet, is geen directory, of mag niet gelezen worden.
shift $(($OPTIND - 1))

if [ -d "$1" ] ; then
	if [ ${#exclude_file[@]} -ne 0 ] ; then
		for item in "${exclude_file[@]}"
			do
				for item2 in $(find $1 -name $item | tail -n +2)
				do
					exclude_array+=("$item2")
				done 2> /dev/null
			done
	fi

	#Alleen bestanden in opgegeven start-directory (inclusief onderliggende directories) worden bekeken
	while read fileName ; do
		for item in $(find $1 -type f -exec sha1sum "{}" \; | grep "$fileName" | tail -n +3 | awk '{print $2}')
		do
			file_array+=("$item")
		done
	done <<< $(find $1 -type f | sort | uniq -d)
		
	if [ ${#exclude_file[@]} -ne 0 ] ; then
		for index in "${!exclude_array[@]}" ;
		do

			for item in ${exclude_array[@]};
			do
				if [ "${file_array[$index]}" = "$item" ]; then
					unset file_array[$index]
				fi
			done
		done
	fi
	#
	for item in "${file_array[@]}" ;
	do
		((amount_found++))
		echo "found duplicate: $item"
	done

	if [ "$del_dup" = true ] ; then
		for i in "${file_array[@]}"
		do
			((amount_deleted++))
			echo "$LANG_DD $item"
			rm $i
		done
	elif [ "$lin_dup" = true ] ; then
		for i in "${file_array[@]}"
		do
			:
		done
	fi
elif [ ! -d "$1" ] ; then
	echo "${LANG_DirDNE:-directory $1 does not exist}"
elif [ ! -r "$1" ] ; then
	echo "${LANG_DirINR:-directory is not readable}"
fi

#=log===================================
#Het script maakt een directory ~/var en voegt regels aan een log file toe 
#(duper.log) waarin diverse zaken omtrent het proces worden opgeslagen, zoals bijvoorbeeld: start-tijd eind-tijd aantal gevonden en verwijderde duplicaten
printf "start time:\t$start_time \nend time:\t$(date) \namount found: \t$amount_found\namount deleted:\t$amount_deleted \n\n" >> ~/var/duper.log

exit $?
